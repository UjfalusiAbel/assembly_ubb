     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  extern scanf
     9                                  extern printf
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  import scanf msvcrt.dll          
    13                                  import printf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 0000                        a dw 0
    19 00000002 0000                        b dw 0
    20 00000004 00000000                    c dd 0
    21 00000008 257500                      scan_format db "%u", 0
    22 0000000B 54686520636F6E7374-         print_format db "The constructed number is %x", 0
    22 00000014 727563746564206E75-
    22 0000001D 6D6265722069732025-
    22 00000026 7800               
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 68[00000000]                    push dword a
    28 00000005 68[08000000]                    push dword scan_format
    29 0000000A FF15[00000000]                  call [scanf]
    30 00000010 83C408                          add ESP, 4*2
    31                                          
    32 00000013 68[02000000]                    push dword b
    33 00000018 68[08000000]                    push dword scan_format
    34 0000001D FF15[00000000]                  call [scanf]
    35 00000023 83C408                          add ESP, 4*2
    36                                          
    37 00000026 66A1[00000000]                  mov AX, [a]
    38 0000002C 660305[02000000]                add AX, [b]
    39 00000033 66A3[04000000]                  mov [c], AX
    40                                          
    41 00000039 66A1[00000000]                  mov AX, [a]
    42 0000003F 662B05[02000000]                sub AX, [b]
    43 00000046 66A3[06000000]                  mov [c+2], AX
    44                                          
    45 0000004C FF35[04000000]                  push dword [c]
    46 00000052 68[0B000000]                    push dword print_format
    47 00000057 FF15[00000000]                  call [printf]
    48 0000005D 83C408                          add ESP, 4*2
    49                                          
    50                                          ; exit(0)
    51 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
