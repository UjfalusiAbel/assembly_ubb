     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;(a*a/b+b*b)/(2+b)+e-x --- unsigned
    15 00000000 04                          a DB 4
    16 00000001 0200                        b DW 2
    17 00000003 03000000                    e DD 3
    18 00000007 0400000000000000            x DQ 4
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov AL, [a]  ;AL = a
    24 00000005 F625[00000000]                  mul byte[a]  ;AX = a*a
    25 0000000B 66BA0000                        mov DX, 0    ;DX:AX = a*a
    26 0000000F 66F735[01000000]                div word[b]  ;AX = a*a/b
    27 00000016 6689C3                          mov BX, AX   ;BX = a*a/b
    28 00000019 66A1[01000000]                  mov AX, [b]  ;AX = b
    29 0000001F 66F725[01000000]                mul word[b]  ;DX:AX = b*b
    30 00000026 6601D8                          add AX, BX   
    31 00000029 6683D200                        adc DX, 0    ;DX:AX = a*a/b+b*b
    32 0000002D 66BB0200                        mov BX, 2    ;BX = 2
    33 00000031 66031D[01000000]                add BX, [b]  ;BX = 2+b
    34 00000038 66F7F3                          div BX       ;AX = (a*a/b+b*b)/(2+b)
    35 0000003B BB00000000                      mov EBX, 0
    36 00000040 6689C3                          mov BX, AX   ;EBX = (a*a/b+b*b)/(2+b)
    37 00000043 031D[03000000]                  add EBX, [e] ;EBX = (a*a/b+b*b)/(2+b)+e
    38 00000049 B900000000                      mov ECX, 0   ;ECX:EBX = (a*a/b+b*b)/(2+b)+e
    39 0000004E 2B1D[07000000]                  sub EBX, dword[x]  
    40 00000054 1B0D[0B000000]                  sbb ECX, dword[x+4] ;ECX:EBX = (a*a/b+b*b)/(2+b)+e-x
    41                                          ; exit(0)
    42 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
