     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;d-a+(b+a-c) signed
    15 00000000 01                          a db 1
    16 00000001 0200                        b dw 2
    17 00000003 07000000                    c dd 7
    18 00000007 0400000000000000            d dq 4
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov AL, [a] ;AL = a
    24 00000005 6698                            CBW
    25 00000007 6699                            CWD
    26 00000009 6652                            push DX
    27 0000000B 6650                            push AX
    28 0000000D 58                              pop EAX
    29 0000000E 99                              CDQ ;EDX:EAX = a
    30 0000000F 8B1D[07000000]                  mov EBX, dword[d]
    31 00000015 8B0D[09000000]                  mov ECX, dword[d+2] ;ECX:EBX = d
    32 0000001B 29C3                            sub EBX, EAX
    33 0000001D 19D1                            sbb ECX, EDX ;ECX:EBX = d-a
    34 0000001F A0[00000000]                    mov AL, [a] ;AL = a
    35 00000024 6698                            CBW
    36 00000026 660305[01000000]                add AX, [b] ;AX = b+a
    37 0000002D 98                              CWDE
    38 0000002E 2B05[03000000]                  sub EAX, [c];EAX = b+a-c
    39 00000034 01C3                            add EBX, EAX
    40 00000036 83D100                          adc ECX, 0  ;ECX:EBX = d-a + (b+a-c)
    41                                          
    42                                          ; exit(0)
    43 00000039 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    44 0000003B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
