     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;(c-a) + (b - d) +d unsigned
    15 00000000 01                          a db 1
    16 00000001 0400                        b dw 4
    17 00000003 03000000                    c dd 3
    18 00000007 0200000000000000            d dq 2
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 B800000000                      mov EAX, 0
    24 00000005 A0[00000000]                    mov AL, [a]
    25 0000000A 2905[03000000]                  sub [c], EAX ;c = c-a
    26 00000010 B800000000                      mov EAX, 0
    27 00000015 66A1[01000000]                  mov AX, [b]
    28 0000001B BA00000000                      mov EDX, 0
    29 00000020 2B05[07000000]                  sub EAX, dword[d]
    30 00000026 1B15[0B000000]                  sbb EDX, dword[d+4] ;EDX:EAX = b-d
    31 0000002C BB00000000                      mov EBX, 0
    32 00000031 8B1D[03000000]                  mov EBX, [c] ;EBX = c-a
    33 00000037 B900000000                      mov ECX, 0
    34 0000003C 01C3                            add EBX, EAX 
    35 0000003E 11D1                            adc ECX, EDX ;ECX:EBX = (c-a) + (b-d)
    36 00000040 031D[07000000]                  add EBX, dword[d]
    37 00000046 130D[0B000000]                  adc ECX, dword[d+4] ;ECX:EBX = (c-a) + (b-d) +d
    38                                          
    39                                          ; exit(0)
    40 0000004C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    41 0000004E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
