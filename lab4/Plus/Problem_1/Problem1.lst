     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;11. problem (d-c)+(b-a)-(b+b+b) - unsigned
    15 00000000 01                          a db 1
    16 00000001 0200                        b dw 2
    17 00000003 03000000                    c dd 3
    18 00000007 0800000000000000            d dq 8
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A1[07000000]                    mov EAX, dword[d]
    24 00000005 8B15[0B000000]                  mov EDX, dword[d+4] ;EDX:EAX = d
    25 0000000B 2B05[03000000]                  sub EAX, [c]
    26 00000011 83DA00                          sbb EDX, 0   ;EDX:EAX = d-c
    27 00000014 668B1D[01000000]                mov BX, [b]  ;BX = b
    28 0000001B 66B90000                        mov CX, 0    
    29 0000001F 8A0D[00000000]                  mov CL, [a]  ;CX = a
    30 00000025 6629CB                          sub BX, CX   ;BX = b-a
    31 00000028 B900000000                      mov ECX, 0   
    32 0000002D 6689D9                          mov CX, BX   ;ECX = b-a
    33 00000030 01C8                            add EAX, ECX 
    34 00000032 83D200                          adc EDX, 0   ;EDX:EAX = (d-c)+(b-a)
    35 00000035 BB00000000                      mov EBX, 0
    36 0000003A 668B1D[01000000]                mov BX, [b]  ;EBX = b
    37 00000041 66031D[01000000]                add BX, [b]  ;EBX = b+b
    38 00000048 66031D[01000000]                add BX, [b]  ;EBX = b+b+b
    39 0000004F 29D8                            sub EAX, EBX 
    40 00000051 83D200                          adc EDX, 0   ;EDX:EAX = (d-c)+(b-a)-(b+b+b)
    41                                          
    42                                          ; exit(0)
    43 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    44 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
