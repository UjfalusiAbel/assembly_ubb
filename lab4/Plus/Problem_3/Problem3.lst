     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;(a+b)/(2-b*b+b/c)-x --- unsigned
    15 00000000 05000000                    a DD 5 
    16 00000004 01                          b DB 1
    17 00000005 01                          c DB 1
    18 00000006 0200000000000000            x DQ 2
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 66A1[00000000]                  mov AX, [a]
    24 00000006 668B15[02000000]                mov DX, [a+2]  ;DX:AX = a
    25 0000000D 8A0D[04000000]                  mov CL, [b]    ;CL = b
    26 00000013 B500                            mov CH, 0      ;CX = b
    27 00000015 6601C8                          add AX, CX
    28 00000018 6683D200                        adc DX, 0      ;DX:AX = a+b
    29 0000001C 6689C3                          mov BX, AX     ;DX:BX = a+b
    30 0000001F 66B90200                        mov CX, 2      ;CX = 2
    31 00000023 A0[04000000]                    mov AL, [b]    ;AL = b
    32 00000028 F625[04000000]                  mul byte[b]    ;AX = b*b
    33 0000002E 6629C1                          sub CX, AX     ;CX = 2-b*b
    34 00000031 66B80000                        mov AX, 0
    35 00000035 A0[04000000]                    mov AL, [b]    ;AX = b
    36 0000003A F635[05000000]                  div byte[c]    ;AL = b/c
    37 00000040 00C1                            add CL, Al
    38 00000042 80D500                          adc CH, 0      ;CX = 2-b*b+b/c
    39 00000045 6689D8                          mov AX, BX     ;DX:AX = a+b
    40 00000048 66F7F1                          div CX         ;AX = (a+b)/(2-b*b+b/c)
    41 0000004B BB00000000                      mov EBX, 0
    42 00000050 6689C3                          mov BX, AX     ;EBX = (a+b)/(2-b*b+b/c)
    43 00000053 B900000000                      mov ECX, 0     ;ECX:EBX = (a+b)/(2-b*b+b/c)
    44 00000058 2B1D[06000000]                  sub EBX, dword[x]
    45 0000005E 1B0D[0A000000]                  sbb ECX, dword[x+4] ;ECX:EBX = (a+b)/(2-b*b+b/c)-x
    46                                          
    47                                          
    48                                          ; exit(0)
    49 00000064 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000066 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
