     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;(a+b)/(2-b*b+b/c)-x --- unsigned
    15 00000000 05000000                    a DD 5 
    16 00000004 03                          b DB 3
    17 00000005 01                          c DB 1
    18 00000006 0400000000000000            x DQ 4
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 8B1D[00000000]                  mov EBX, [a]  ;EBX = a
    24 00000006 A0[04000000]                    mov AL, [b]   ;AL = b
    25 0000000B 6698                            CBW           ;AX = b
    26 0000000D 98                              CWDE          ;EAX = b
    27 0000000E 01C3                            add EBX, EAX  ;EBX = a+b
    28 00000010 66B90200                        mov CX, 2     ;CX = 2
    29 00000014 A0[04000000]                    mov AL, [b]   ;AL = b
    30 00000019 F62D[04000000]                  imul byte[b]  ;AX = b*b
    31 0000001F 6629C1                          sub CX, AX    ;CX = 2-b*b
    32 00000022 A0[04000000]                    mov AL, [b]   ;AL = b
    33 00000027 B400                            mov AH, 0     ;AX = b
    34 00000029 F63D[05000000]                  idiv byte[c]  ;AL = b/c
    35 0000002F 00C1                            add CL, AL
    36 00000031 80D500                          adc CH, 0     ;CX = 2-b*b+b/c
    37 00000034 891D[00000000]                  mov [a],EBX   ;a = a+b
    38 0000003A 66A1[00000000]                  mov AX, word[a]
    39 00000040 668B15[02000000]                mov DX, word[a+2] ;DX:AX = a+b
    40 00000047 66F7F9                          idiv CX        ;AX = (a+b)/(2-b*b+b/c)
    41 0000004A 98                              CWDE          ;EAX = (a+b)/(2-b*b+b/c)
    42 0000004B 99                              CDQ           ;EDX:EAX = (a+b)/(2-b*b+b/c)
    43 0000004C 2B05[06000000]                  sub EAX, dword[x]
    44 00000052 1B15[0A000000]                  sbb EDX, dword[x+4] ;EDX:EAX = (a+b)/(2-b*b+b/c)-x
    45                                          
    46                                          
    47                                          ; exit(0)
    48 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
