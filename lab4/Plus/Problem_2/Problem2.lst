     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;d-(a+b+c)-(a+a)  --- signed
    15 00000000 02                          a db 2
    16 00000001 0300                        b dw 3
    17 00000003 04000000                    c dd 4
    18 00000007 0A00000000000000            d dq 10
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 8B1D[07000000]                  mov EBX, dword[d]
    24 00000006 8B0D[0B000000]                  mov ECX, dword[d+4] ;ECX:EBX = d
    25 0000000C A0[00000000]                    mov AL, [a]  ;AL = a
    26 00000011 6698                            CBW          ;AX = a
    27 00000013 660305[01000000]                add AX, [b]  ;AX = a+b
    28 0000001A 98                              CWDE         ;EAX = a+b
    29 0000001B 0305[03000000]                  add EAX, [c] ;EAX = a+b+c
    30 00000021 29C3                            sub EBX, EAX
    31 00000023 83D900                          sbb ECX, 0   ;ECX:EBX = d-(a+b+c)
    32 00000026 A0[00000000]                    mov Al, [a]  ;AL = a
    33 0000002B 0205[00000000]                  add AL, [a]  ;AL = a+a
    34 00000031 6698                            CBW
    35 00000033 98                              CWDE         ;EAX = a+a
    36 00000034 29C3                            sub EBX, EAX
    37 00000036 83D900                          sbb ECX, 0   ;ECX:EBX = d-(a+b+c)-(a+a)
    38                                          ; exit(0)
    39 00000039 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000003B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
