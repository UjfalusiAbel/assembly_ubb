     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;Two byte strings A and B are given. 
    15                                      ;Obtain the string R by concatenating the elements of B in reverse order and the negative elements of A. 
    16                                      
    17 00000000 0201FD03FC0206              a db 2,1,-3,3,-4,2,6
    18                                      lena equ $-a
    19 00000007 040507060201                b db 4,5,7,6,2,1
    20                                      lenb equ $-b
    21 0000000D 01<rept>                    r times lena+lenb db 1
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 B906000000                      mov ECX, lenb
    28 00000005 BE[0C000000]                    mov ESI, b+lenb-1
    29 0000000A BF[0D000000]                    mov EDI, r
    30 0000000F E308                            jecxz endloop1
    31                                          loop1:
    32 00000011 8A06                                mov AL, [ESI]
    33 00000013 8807                                mov [EDI], AL
    34 00000015 4E                                  dec ESI
    35 00000016 47                                  inc EDI
    36 00000017 E2F8                            loop loop1
    37                                          endloop1:
    38                                          
    39 00000019 B907000000                      mov ECX, lena
    40 0000001E BE[00000000]                    mov ESI, a
    41                                          
    42 00000023 E30C                            jecxz endloop2
    43                                          loop2:
    44 00000025 8A06                                mov AL, [ESI]
    45 00000027 3C00                                CMP AL, 0
    46 00000029 7D03                                jge skip
    47 0000002B 8807                                    mov [EDI], AL
    48 0000002D 47                                      inc EDI
    49                                              skip:
    50 0000002E 46                                  inc ESI
    51 0000002F E2F4                            loop loop2
    52                                          endloop2:
    53                                          
    54                                          ; exit(0)
    55 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
