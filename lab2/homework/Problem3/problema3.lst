     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;21. a-c+d-7+b-(2+d) // 1-3+4-7+2-(2+4)=-9
    15 00000000 0100                        a DW 1
    16 00000002 0200                        b DW 2
    17 00000004 0300                        c DW 3
    18 00000006 0400                        d DW 4
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 66A1[00000000]                  mov AX, [a]
    24 00000006 662B05[04000000]                sub AX, [c] ;AX = a-c
    25 0000000D 660305[06000000]                add AX, [d] ;AX = a-c+d
    26 00000014 6683E807                        sub AX, 7   ;AX = a-c+d-7
    27 00000018 660305[02000000]                add AX, [b] ;AX = a-c+d-7+b
    28 0000001F 66BB0200                        mov BX, 2   ;BX = 2
    29 00000023 66031D[06000000]                add BX, [d] ;BX = 2+d
    30 0000002A 6629D8                          sub AX, BX  ;AX = a-c+d-7+b-(2+d)
    31                                          ; exit(0)
    32 0000002D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    33 0000002F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
